{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["Stats","props","totalPlayers","players","length","totalPoints","reduce","total","player","score","className","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","setState","prevState","Date","now","tick","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","Counter","index","changeScore","Icon","viewBox","isHighScore","d","transform","width","height","Player","removePlayer","id","name","PureComponent","AddPlayerForm","value","handleValueChange","e","target","handleSubmit","preventDefault","addPlayer","onSubmit","type","placeholder","onChange","AppHeader","App","prevPlayerId","handleScoreChange","change","handleAddPlayer","handleRemovePlayer","filter","p","getHighScore","scores","map","highScore","max","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e1ab442.chunk.js","sourcesContent":["import React from 'react';\n\nconst Stats = (props) => {\n\n\tconst totalPlayers = props.players.length;\n\tconst totalPoints = props.players.reduce((total, player) => {\n\t\treturn total + player.score;\n\t}, 0);\n\treturn(\n\t<table className=\"stats\">\n\t  <tbody>\n\t    <tr>\n\t      <td>Players:</td>\n\t      <td>{totalPlayers}</td>\n\t    </tr>\n\t    <tr>\n\t      <td>Total Points:</td>\n\t      <td>{totalPoints}</td>\n\t    </tr>\n\t  </tbody>\n\t</table>\n\t);\n}\n\nexport default Stats;","import React, {Component} from 'react';\n\nclass Stopwatch extends Component {\n\tstate = {\n\t\tisRunning: false,\n\t\telapsedTime: 0,\n\t\tpreviousTime: 0\n\t}\n\n\thandleStopwatch = () => {\n\t\tthis.setState( prevState => ({\n\t\t\tisRunning: !prevState.isRunning\n\t\t}));\n\n\t\tif (!this.state.isRunning) {\n\t\t\tthis.setState({\n\t\t\t\tpreviousTime: Date.now()\n\t\t\t})\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.intervalID = setInterval(() => this.tick(), 100)\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.intervalID);\n\t}\n\n\n\t\ttick = () => {\n\t\tif (this.state.isRunning) {\n\t\t\tconst now = Date.now();\n\t\t\tthis.setState( prevState => ({\n\t\t\t\tpreviousTime: now,\n\t\t\t\telapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n\t\t\t}));\n\t\t}\n\t}\n\n\thandleReset = () => {\n\t\tthis.setState({\n\t\t\telapsedTime: 0\n\t\t});\n\t}\n\n\trender() {\n\t\tconst seconds = Math.floor(this.state.elapsedTime / 1000)\n\t\treturn(\n\t\t\t<div className=\"stopwatch\">\n\t\t\t\t<h2>Stopwatch</h2>\n\t\t\t\t<span className=\"stopwatch-time\">{seconds}</span>\n\t\t\t\t<button onClick={this.handleStopwatch}>{this.state.isRunning ? 'Stop' : 'Start'}</button>\n\t\t\t\t<button onClick={this.handleReset}>Reset</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Stopwatch;\n","import React from 'react';\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\n\nconst Header = (props) => {\n  return (\n    <header>\n      <Stats players={props.players} />\t\n      <h1>{ props.title }</h1>\n      <Stopwatch /> \n    </header>\n  );\n}\n\n\nexport default Header;","import React from 'react';\n\n\nconst Counter = (props) => {\n\n\tlet index = props.index;\n\n\treturn (\n\t  <div className=\"counter\">\n\t    <button className=\"counter-action decrement\" onClick={() => props.changeScore(index, -1)}> - </button>\n\t    <span className=\"counter-score\">{props.score }</span>\n\t    <button className=\"counter-action increment\" onClick={() => props.changeScore(index, +1)}> + </button>\n\t  </div>\n\t);\n}\n\nexport default Counter;","\nimport React from 'react';\n\n\nconst Icon = (props) =>\n  <svg viewBox=\"0 0 44 35\" className={ props.isHighScore ? 'is-high-score' : null }>\n    <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n    <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n  </svg>;\n\n\n\nexport default Icon;","import React, { PureComponent } from 'react';\nimport Counter from './Counter';\nimport Icon from './Icon';\n\n\n\nclass Player extends PureComponent {\n  render() {\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={ () => this.props.removePlayer(this.props.id) }>âœ–</button>\n          { this.props.name }\n          <Icon isHighScore={this.props.isHighScore} />\n        </span>\n\n        <Counter \n        \tscore={this.props.score} \n        \tchangeScore={this.props.changeScore}\n        \tindex={this.props.index}\n\n        />\n      </div>\n    );\n  }\n}\n\nexport default Player;","\nimport React, {Component} from 'react';\n\n\nclass AddPlayerForm extends Component {\n\tstate = {\n\t\tvalue: ''\n\t}\n\n\thandleValueChange = (e) => {\n\t\tthis.setState({value: e.target.value})\n\t}\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.addPlayer(this.state.value);\n\t\tthis.setState({\n\t\t\tvalue: ''\n\t\t});\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Enter a player's name\"\n\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\tonChange={this.handleValueChange}\n\t\t\t\t/>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tvalue=\"Add Player\"\n\t\t\t\t/>\t\t\t\t\n\t\t\t</form>\n\n\t\t);\n\t}\n}\n\n\nexport default AddPlayerForm;","\nimport React from 'react';\n\n\nconst AppHeader = () => {\n\treturn(\n\t\t<div className=\"appHeader\">\n\t\t\t<h1>Scoreboard App</h1>\n\t\t\t<p>Made with React.js</p>\n\t\t</div>\n\t);\n}\n\nexport default AppHeader;\n\n","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport Player from './components/Player';\nimport AddPlayerForm from './components/AddPlayerForm';\nimport AppHeader from './AppHeader';\nimport './App.css';\n\n\nclass App extends Component {\n\tstate = {\n\t    players: [\n      {\n        name: \"Katy\",\n        score: 0,\n        id: 1\n      },\n      {\n        name: \"Wayne\",\n        score: 0,\n        id: 2\n      },\n      {\n        name: \"Squirrely Dan\",\n        score: 0,\n        id: 3\n      },\n      {\n        name: \"Darry\",\n        score: 0,\n        id: 4\n      }\n    ]\n};\n\n\n\tprevPlayerId = 4;\n\n\n\thandleScoreChange = (index, change) => { \n\t\tthis.setState( prevState => ({\n\t\t\tscore: prevState.players[index].score += change\n\t\t}));\n\t}\n\n\thandleAddPlayer = (name) => { \n\t\tthis.setState( prevState => {\n\t\t\treturn {\n\t\t\t\tplayers: [\n\t\t\t\t...prevState.players,\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tscore: 0,\n\t\t\t\t\t\tid: this.prevPlayerId += 1\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t});\n\t}\n\n\n\thandleRemovePlayer = (id) => {\n\t\tthis.setState( prevState => {\n\t\t\treturn {\n\t\t\t\tplayers: prevState.players.filter(p => p.id !== id)\n\t\t\t};\n\t\t});\n\t}\n\n\tgetHighScore = () => {\n\t  const scores = this.state.players.map( p => p.score );\n\t  const highScore = Math.max(...scores);\n\t  if (highScore) {\n\t    return highScore;\n\t  } \n\t  return null;\n\t}\n\n\n\trender() {\n\t\tconst highScore = this.getHighScore();\n\t\treturn (\n\t\t  <div>\t\n\t\t  \t  <AppHeader />\t\n\t\t\t  <div className=\"scoreboard\">\n\t\t\t    <Header \n\t\t\t      title=\"Scoreboard\" \n\t\t\t      players={this.state.players} \n\t\t\t      totalPlayers={this.state.players.length} \n\t\t\t    />\n\t\t\t    {this.state.players.map( (player, index) =>\n\t\t        <Player \n\t\t        \tname={player.name}\n\t\t        \tscore={player.score}\n\t\t        \tid={player.id}\n\t\t        \tkey={player.id.toString()}\n\t\t        \tindex={index}\n\t\t        \tremovePlayer={this.handleRemovePlayer}\n\t\t        \tchangeScore={this.handleScoreChange}\n\t\t        \tisHighScore={highScore === player.score}\n\n\t\t        />\n\t\t\t    )}\n\t\t        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n\n\n\t\t\t  </div>\n\t\t  </div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}